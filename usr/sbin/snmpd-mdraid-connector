#!/bin/bash -u

[[ ! -r /usr/lib/snmpd-connector-lib.sh ]] && echo "Unable to find /usr/lib/snmpd-connector-lib.sh" && exit 1
source /usr/lib/snmpd-connector-lib.sh

function send_index
{
	# If the index is in range...
	if (( ${RINDEX} <= ${#DEVICES[@]} )); then
		# Send the OID and the index number.
		send_integer ${OID} ${RINDEX}
	else
		# Send none.
		echo "NONE"
	fi
}

# Helper function to make the filename for a device.
#
#	@param	$1 - The DEVICE to create a path for
#	@return	$2 - The device cache file path
#
function get_device_filename
{
	local DEVFNAME
	
	# Make the device info filename 
	DEVFNAME=${1##\/}
	DEVFNAME=${CACHEDIR}/${DEVFNAME//\//_}_mdinfo
	
	eval $2=${DEVFNAME}
}

# Helper function to get the string value of a field
#
#	@param	$1 - The DEVICE to get info for
#	@param	$2 - The search string
#	@return	$3 - The string we found, if any.
#
function get_field
{
	local DFNAME VALUES L
	
	get_device_filename ${1} DFNAME

	# Try to find the search string and get its line into an array.
	VALUES=($(grep "${2}" < ${DFNAME}))
	
	# Loop through the results looking for a ":", the value we want is next.
	for (( L=0; L<${#VALUES[@]}; L++ ))
	do
		if [[ ${VALUES[L]} = ":" ]]; then
			eval $3=${VALUES[L+1]}
			return
		fi
	done 
	
	# If we got this far then there was no matching value, or it was blank.
	eval $3="N/A" 
}

# Function to send array info (string) - called: send_device_info_str OID DEVICE "Info String"
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#	$3 - The STRING to search for
#
function send_device_info_str
{
	local VALUE
	
	get_field ${2} "${3}" VALUE
	send_string ${1} ${VALUE}
}

# Function to send array health (string) - called: send_device_health OID DEVICE
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#
function send_device_health
{
	local VALUE
	
	get_field ${2} "State" VALUE
	[[ $VALUE == "active" ]] && send_boolean ${1} "T" || send_boolean ${1} "F"
}

# Function to boolean indicating array has failed components - called: send_device_has_failed OID DEVICE
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#
function send_device_has_failed
{
	local VALUE

	get_field ${2} "Failed Devices" VALUE
	(( ${VALUE} > 0 )) && send_boolean ${1} "T" || send_boolean ${1} "F"
}

# Function to boolean indicating array has available spares - called: send_device_has_spares OID DEVICE
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#
function send_device_has_spares
{
	local VALUE

	get_field ${2} "Spare Devices" VALUE
	(( ${VALUE} > 0 )) && send_boolean ${1} "T" || send_boolean ${1} "F"
}

# Function to send array info (gauge) - called: send_device_info_gauge OID DEVICE "Info String"
#
#	$1 - The OID to send before this data
#	$2 - The DEVICE to send data for
#	$3 - The STRING to search for
#
function send_device_info_gauge
{
	local VALUE
	
	get_field ${2} "${3}" VALUE
	send_gauge ${1} ${VALUE}
}

# Init local vars
CMDNAME=$(basename ${0})
CONFIG="/etc/snmpd-mdraid-connector"
DEBUG=""
DEVICES=""
CACHEDIR=""
SNMP_TRANSLATE=""

# Read the config file if we can
[[ -r ${CONFIG} ]] && source ${CONFIG} || die "Unable to read configuration file [${CONFIG}]"

# Check for config values.
[[ -z ${DEVICES} ]] && die "No DEVICES configured in ${CONFIG}"
[[ -z ${CACHEDIR} ]] && die "No CACHEDIR configured in ${CONFIG}"
[[ ! -d ${CACHEDIR} ]] && die "Cache directory [${CACHEDIR}] is not a directory"
[[ ! -w ${CACHEDIR} ]] && die "Cache directory [${CACHEDIR}] is not writable by $(whoami)"
[[ -z ${SNMP_TRANSLATE} ]] && die "No SNMP_TRANSLATE command configured in ${CONFIG}"

# Get base OID
BASE_MIB="MD-RAID-MIB::mdRaidTable"
BASE_OID="$(${SNMP_TRANSLATE} -On ${BASE_MIB}).1."
(( $? != 0 )) && die "Unable to resolve base OID from ${BASE_MIB}"

# Declare the function table.
FTABLE[1]="send_index"											# It is an index request.
FTABLE[2]="send_string %o %d" 									# It is for the mapped device path.
FTABLE[3]="send_device_info_str %o %d 'Version'" 				# It is for the raid version.
FTABLE[4]="send_device_info_str %o %d 'UUID'" 					# It is for the raid UUID.
FTABLE[5]="send_device_info_str %o %d 'Raid Level'"				# It is for the raid level.
FTABLE[6]="send_device_info_str %o %d 'Layout'" 				# It is for the raid layout.
FTABLE[7]="send_device_info_str %o %d 'Chunk Size'"				# It is for the raid chunk size.
FTABLE[8]="send_device_info_str %o %d 'Array Size'" 			# It is for the raid array size.
FTABLE[9]="send_device_info_str %o %d 'Used Dev Size'"			# It is for the raid used device size.
FTABLE[10]="send_device_health %o %d"							# It is for the overall array health state.
FTABLE[11]="send_device_has_failed %o %d"						# Boolean indicating failed components.
FTABLE[12]="send_device_has_spares %o %d"						# Boolean indicating available spares.
FTABLE[13]="send_device_info_gauge %o %d 'Total Devices'"		# It is for the total number of devices in the array.
FTABLE[14]="send_device_info_gauge %o %d 'Active Devices'"		# It is for the number of active devices in the array.
FTABLE[15]="send_device_info_gauge %o %d 'Working Devices'"		# It is for the number of working devices in the array.
FTABLE[16]="send_device_info_gauge %o %d 'Failed Devices'"		# It is for the number of failed devices in the array.
FTABLE[17]="send_device_info_gauge %o %d 'Spare Devices'"		# It is for the number of spare devices in the array.

# Define the function to perform string replacement
#
#	@param	$1 - The starting string
#	@param	$2 - The R[equest]TYPE
#	@param	$3 - The R[equest]INDEX
#	@return	$4 - The resulting string
#
# 	%o does not require handling
#
function do_string_replace
{
	local TEMP="${1}"
	local AINDEX=$((${3} - 1))

	# Replace %d with the device path		
	TEMP="${TEMP/\%d/${DEVICES[${AINDEX}]}}"
	
	eval $4="\"${TEMP}\""
}

# Start the loop
the_loop

